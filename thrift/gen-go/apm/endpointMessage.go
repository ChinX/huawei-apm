// Autogenerated by Thrift Compiler (0.12.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package apm

import (
	"bytes"
	"context"
	"reflect"
	"database/sql/driver"
	"errors"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

type TFailureEventType int64
const (
  TFailureEventType_CRASH TFailureEventType = 0
  TFailureEventType_ANR TFailureEventType = 1
)

func (p TFailureEventType) String() string {
  switch p {
  case TFailureEventType_CRASH: return "CRASH"
  case TFailureEventType_ANR: return "ANR"
  }
  return "<UNSET>"
}

func TFailureEventTypeFromString(s string) (TFailureEventType, error) {
  switch s {
  case "CRASH": return TFailureEventType_CRASH, nil 
  case "ANR": return TFailureEventType_ANR, nil 
  }
  return TFailureEventType(0), fmt.Errorf("not a valid TFailureEventType string")
}


func TFailureEventTypePtr(v TFailureEventType) *TFailureEventType { return &v }

func (p TFailureEventType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *TFailureEventType) UnmarshalText(text []byte) error {
q, err := TFailureEventTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *TFailureEventType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = TFailureEventType(v)
return nil
}

func (p * TFailureEventType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - TransactionType
//  - DestAppId
//  - DestResourceId
//  - DestTierName
//  - OriginalDestination
//  - Throughput
//  - TotalLatencyList
//  - TotalErrorIndicatorList
//  - TotalActiveLatencyList
//  - Segments
type TEndpointKpiMessage struct {
  // unused fields # 1 to 9
  TransactionType string `thrift:"transactionType,10" db:"transactionType" json:"transactionType"`
  // unused fields # 11 to 14
  DestAppId string `thrift:"destAppId,15" db:"destAppId" json:"destAppId"`
  // unused fields # 16 to 19
  DestResourceId string `thrift:"destResourceId,20" db:"destResourceId" json:"destResourceId"`
  // unused fields # 21 to 29
  DestTierName string `thrift:"destTierName,30" db:"destTierName" json:"destTierName"`
  // unused fields # 31 to 39
  OriginalDestination string `thrift:"originalDestination,40" db:"originalDestination" json:"originalDestination"`
  // unused fields # 41 to 99
  Throughput int32 `thrift:"throughput,100" db:"throughput" json:"throughput"`
  // unused fields # 101 to 109
  TotalLatencyList []int32 `thrift:"totalLatencyList,110" db:"totalLatencyList" json:"totalLatencyList"`
  // unused fields # 111 to 119
  TotalErrorIndicatorList []bool `thrift:"totalErrorIndicatorList,120" db:"totalErrorIndicatorList" json:"totalErrorIndicatorList"`
  // unused fields # 121 to 129
  TotalActiveLatencyList []int32 `thrift:"totalActiveLatencyList,130" db:"totalActiveLatencyList" json:"totalActiveLatencyList"`
  // unused fields # 131 to 199
  Segments map[string]string `thrift:"segments,200" db:"segments" json:"segments"`
}

func NewTEndpointKpiMessage() *TEndpointKpiMessage {
  return &TEndpointKpiMessage{}
}


func (p *TEndpointKpiMessage) GetTransactionType() string {
  return p.TransactionType
}

func (p *TEndpointKpiMessage) GetDestAppId() string {
  return p.DestAppId
}

func (p *TEndpointKpiMessage) GetDestResourceId() string {
  return p.DestResourceId
}

func (p *TEndpointKpiMessage) GetDestTierName() string {
  return p.DestTierName
}

func (p *TEndpointKpiMessage) GetOriginalDestination() string {
  return p.OriginalDestination
}

func (p *TEndpointKpiMessage) GetThroughput() int32 {
  return p.Throughput
}

func (p *TEndpointKpiMessage) GetTotalLatencyList() []int32 {
  return p.TotalLatencyList
}

func (p *TEndpointKpiMessage) GetTotalErrorIndicatorList() []bool {
  return p.TotalErrorIndicatorList
}

func (p *TEndpointKpiMessage) GetTotalActiveLatencyList() []int32 {
  return p.TotalActiveLatencyList
}

func (p *TEndpointKpiMessage) GetSegments() map[string]string {
  return p.Segments
}
func (p *TEndpointKpiMessage) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField15(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField20(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 30:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField30(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 40:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField40(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 100:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField100(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 110:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField110(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 120:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField120(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 130:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField130(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 200:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField200(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TEndpointKpiMessage)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.TransactionType = v
}
  return nil
}

func (p *TEndpointKpiMessage)  ReadField15(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.DestAppId = v
}
  return nil
}

func (p *TEndpointKpiMessage)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.DestResourceId = v
}
  return nil
}

func (p *TEndpointKpiMessage)  ReadField30(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 30: ", err)
} else {
  p.DestTierName = v
}
  return nil
}

func (p *TEndpointKpiMessage)  ReadField40(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 40: ", err)
} else {
  p.OriginalDestination = v
}
  return nil
}

func (p *TEndpointKpiMessage)  ReadField100(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 100: ", err)
} else {
  p.Throughput = v
}
  return nil
}

func (p *TEndpointKpiMessage)  ReadField110(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.TotalLatencyList =  tSlice
  for i := 0; i < size; i ++ {
var _elem0 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem0 = v
}
    p.TotalLatencyList = append(p.TotalLatencyList, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TEndpointKpiMessage)  ReadField120(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]bool, 0, size)
  p.TotalErrorIndicatorList =  tSlice
  for i := 0; i < size; i ++ {
var _elem1 bool
    if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem1 = v
}
    p.TotalErrorIndicatorList = append(p.TotalErrorIndicatorList, _elem1)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TEndpointKpiMessage)  ReadField130(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.TotalActiveLatencyList =  tSlice
  for i := 0; i < size; i ++ {
var _elem2 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem2 = v
}
    p.TotalActiveLatencyList = append(p.TotalActiveLatencyList, _elem2)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TEndpointKpiMessage)  ReadField200(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Segments =  tMap
  for i := 0; i < size; i ++ {
var _key3 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key3 = v
}
var _val4 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val4 = v
}
    p.Segments[_key3] = _val4
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TEndpointKpiMessage) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TEndpointKpiMessage"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField30(oprot); err != nil { return err }
    if err := p.writeField40(oprot); err != nil { return err }
    if err := p.writeField100(oprot); err != nil { return err }
    if err := p.writeField110(oprot); err != nil { return err }
    if err := p.writeField120(oprot); err != nil { return err }
    if err := p.writeField130(oprot); err != nil { return err }
    if err := p.writeField200(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TEndpointKpiMessage) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("transactionType", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:transactionType: ", p), err) }
  if err := oprot.WriteString(string(p.TransactionType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.transactionType (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:transactionType: ", p), err) }
  return err
}

func (p *TEndpointKpiMessage) writeField15(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("destAppId", thrift.STRING, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:destAppId: ", p), err) }
  if err := oprot.WriteString(string(p.DestAppId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.destAppId (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:destAppId: ", p), err) }
  return err
}

func (p *TEndpointKpiMessage) writeField20(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("destResourceId", thrift.STRING, 20); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:destResourceId: ", p), err) }
  if err := oprot.WriteString(string(p.DestResourceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.destResourceId (20) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 20:destResourceId: ", p), err) }
  return err
}

func (p *TEndpointKpiMessage) writeField30(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("destTierName", thrift.STRING, 30); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:destTierName: ", p), err) }
  if err := oprot.WriteString(string(p.DestTierName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.destTierName (30) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 30:destTierName: ", p), err) }
  return err
}

func (p *TEndpointKpiMessage) writeField40(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("originalDestination", thrift.STRING, 40); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:originalDestination: ", p), err) }
  if err := oprot.WriteString(string(p.OriginalDestination)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.originalDestination (40) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 40:originalDestination: ", p), err) }
  return err
}

func (p *TEndpointKpiMessage) writeField100(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("throughput", thrift.I32, 100); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 100:throughput: ", p), err) }
  if err := oprot.WriteI32(int32(p.Throughput)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.throughput (100) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 100:throughput: ", p), err) }
  return err
}

func (p *TEndpointKpiMessage) writeField110(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("totalLatencyList", thrift.LIST, 110); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 110:totalLatencyList: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I32, len(p.TotalLatencyList)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.TotalLatencyList {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 110:totalLatencyList: ", p), err) }
  return err
}

func (p *TEndpointKpiMessage) writeField120(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("totalErrorIndicatorList", thrift.LIST, 120); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 120:totalErrorIndicatorList: ", p), err) }
  if err := oprot.WriteListBegin(thrift.BOOL, len(p.TotalErrorIndicatorList)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.TotalErrorIndicatorList {
    if err := oprot.WriteBool(bool(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 120:totalErrorIndicatorList: ", p), err) }
  return err
}

func (p *TEndpointKpiMessage) writeField130(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("totalActiveLatencyList", thrift.LIST, 130); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 130:totalActiveLatencyList: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I32, len(p.TotalActiveLatencyList)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.TotalActiveLatencyList {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 130:totalActiveLatencyList: ", p), err) }
  return err
}

func (p *TEndpointKpiMessage) writeField200(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("segments", thrift.MAP, 200); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 200:segments: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Segments)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Segments {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 200:segments: ", p), err) }
  return err
}

func (p *TEndpointKpiMessage) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TEndpointKpiMessage(%+v)", *p)
}

// Attributes:
//  - FailureEventType
//  - EnvironmentProperties
type TEndpointFailureMessage struct {
  // unused fields # 1 to 9
  FailureEventType TFailureEventType `thrift:"failureEventType,10" db:"failureEventType" json:"failureEventType"`
  // unused fields # 11 to 19
  EnvironmentProperties map[string]string `thrift:"environmentProperties,20" db:"environmentProperties" json:"environmentProperties"`
}

func NewTEndpointFailureMessage() *TEndpointFailureMessage {
  return &TEndpointFailureMessage{}
}


func (p *TEndpointFailureMessage) GetFailureEventType() TFailureEventType {
  return p.FailureEventType
}

func (p *TEndpointFailureMessage) GetEnvironmentProperties() map[string]string {
  return p.EnvironmentProperties
}
func (p *TEndpointFailureMessage) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField20(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TEndpointFailureMessage)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  temp := TFailureEventType(v)
  p.FailureEventType = temp
}
  return nil
}

func (p *TEndpointFailureMessage)  ReadField20(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.EnvironmentProperties =  tMap
  for i := 0; i < size; i ++ {
var _key5 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key5 = v
}
var _val6 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val6 = v
}
    p.EnvironmentProperties[_key5] = _val6
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TEndpointFailureMessage) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TEndpointFailureMessage"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TEndpointFailureMessage) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("failureEventType", thrift.I32, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:failureEventType: ", p), err) }
  if err := oprot.WriteI32(int32(p.FailureEventType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.failureEventType (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:failureEventType: ", p), err) }
  return err
}

func (p *TEndpointFailureMessage) writeField20(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("environmentProperties", thrift.MAP, 20); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:environmentProperties: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.EnvironmentProperties)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.EnvironmentProperties {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 20:environmentProperties: ", p), err) }
  return err
}

func (p *TEndpointFailureMessage) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TEndpointFailureMessage(%+v)", *p)
}

// Attributes:
//  - EndpointType
//  - SrcAppId
//  - GlobalSegments
//  - Messages
//  - Stats
//  - Spans
//  - FailureMessage
type TEndpointMessage struct {
  // unused fields # 1 to 9
  EndpointType string `thrift:"endpointType,10" db:"endpointType" json:"endpointType"`
  // unused fields # 11 to 19
  SrcAppId string `thrift:"srcAppId,20" db:"srcAppId" json:"srcAppId"`
  // unused fields # 21 to 99
  GlobalSegments map[string]string `thrift:"globalSegments,100" db:"globalSegments" json:"globalSegments"`
  // unused fields # 101 to 199
  Messages []*TEndpointKpiMessage `thrift:"messages,200" db:"messages" json:"messages"`
  // unused fields # 201 to 299
  Stats []*TEndpointStatsMessage `thrift:"stats,300" db:"stats" json:"stats"`
  // unused fields # 301 to 399
  Spans map[string][][]byte `thrift:"spans,400" db:"spans" json:"spans"`
  // unused fields # 401 to 499
  FailureMessage *TEndpointFailureMessage `thrift:"failureMessage,500" db:"failureMessage" json:"failureMessage,omitempty"`
}

func NewTEndpointMessage() *TEndpointMessage {
  return &TEndpointMessage{}
}


func (p *TEndpointMessage) GetEndpointType() string {
  return p.EndpointType
}

func (p *TEndpointMessage) GetSrcAppId() string {
  return p.SrcAppId
}

func (p *TEndpointMessage) GetGlobalSegments() map[string]string {
  return p.GlobalSegments
}

func (p *TEndpointMessage) GetMessages() []*TEndpointKpiMessage {
  return p.Messages
}

func (p *TEndpointMessage) GetStats() []*TEndpointStatsMessage {
  return p.Stats
}

func (p *TEndpointMessage) GetSpans() map[string][][]byte {
  return p.Spans
}
var TEndpointMessage_FailureMessage_DEFAULT *TEndpointFailureMessage
func (p *TEndpointMessage) GetFailureMessage() *TEndpointFailureMessage {
  if !p.IsSetFailureMessage() {
    return TEndpointMessage_FailureMessage_DEFAULT
  }
return p.FailureMessage
}
func (p *TEndpointMessage) IsSetFailureMessage() bool {
  return p.FailureMessage != nil
}

func (p *TEndpointMessage) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField20(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 100:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField100(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 200:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField200(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 300:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField300(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 400:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField400(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 500:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField500(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TEndpointMessage)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.EndpointType = v
}
  return nil
}

func (p *TEndpointMessage)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.SrcAppId = v
}
  return nil
}

func (p *TEndpointMessage)  ReadField100(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.GlobalSegments =  tMap
  for i := 0; i < size; i ++ {
var _key7 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key7 = v
}
var _val8 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val8 = v
}
    p.GlobalSegments[_key7] = _val8
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TEndpointMessage)  ReadField200(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TEndpointKpiMessage, 0, size)
  p.Messages =  tSlice
  for i := 0; i < size; i ++ {
    _elem9 := &TEndpointKpiMessage{}
    if err := _elem9.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem9), err)
    }
    p.Messages = append(p.Messages, _elem9)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TEndpointMessage)  ReadField300(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TEndpointStatsMessage, 0, size)
  p.Stats =  tSlice
  for i := 0; i < size; i ++ {
    _elem10 := &TEndpointStatsMessage{}
    if err := _elem10.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem10), err)
    }
    p.Stats = append(p.Stats, _elem10)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TEndpointMessage)  ReadField400(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string][][]byte, size)
  p.Spans =  tMap
  for i := 0; i < size; i ++ {
var _key11 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key11 = v
}
    _, size, err := iprot.ReadListBegin()
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([][]byte, 0, size)
    _val12 :=  tSlice
    for i := 0; i < size; i ++ {
var _elem13 []byte
      if v, err := iprot.ReadBinary(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
} else {
      _elem13 = v
}
      _val12 = append(_val12, _elem13)
    }
    if err := iprot.ReadListEnd(); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.Spans[_key11] = _val12
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TEndpointMessage)  ReadField500(iprot thrift.TProtocol) error {
  p.FailureMessage = &TEndpointFailureMessage{}
  if err := p.FailureMessage.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.FailureMessage), err)
  }
  return nil
}

func (p *TEndpointMessage) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TEndpointMessage"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField100(oprot); err != nil { return err }
    if err := p.writeField200(oprot); err != nil { return err }
    if err := p.writeField300(oprot); err != nil { return err }
    if err := p.writeField400(oprot); err != nil { return err }
    if err := p.writeField500(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TEndpointMessage) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("endpointType", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:endpointType: ", p), err) }
  if err := oprot.WriteString(string(p.EndpointType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.endpointType (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:endpointType: ", p), err) }
  return err
}

func (p *TEndpointMessage) writeField20(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("srcAppId", thrift.STRING, 20); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:srcAppId: ", p), err) }
  if err := oprot.WriteString(string(p.SrcAppId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.srcAppId (20) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 20:srcAppId: ", p), err) }
  return err
}

func (p *TEndpointMessage) writeField100(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("globalSegments", thrift.MAP, 100); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 100:globalSegments: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.GlobalSegments)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.GlobalSegments {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 100:globalSegments: ", p), err) }
  return err
}

func (p *TEndpointMessage) writeField200(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("messages", thrift.LIST, 200); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 200:messages: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Messages)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Messages {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 200:messages: ", p), err) }
  return err
}

func (p *TEndpointMessage) writeField300(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("stats", thrift.LIST, 300); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 300:stats: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Stats)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Stats {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 300:stats: ", p), err) }
  return err
}

func (p *TEndpointMessage) writeField400(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("spans", thrift.MAP, 400); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 400:spans: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.LIST, len(p.Spans)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Spans {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := oprot.WriteBinary(v); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 400:spans: ", p), err) }
  return err
}

func (p *TEndpointMessage) writeField500(oprot thrift.TProtocol) (err error) {
  if p.IsSetFailureMessage() {
    if err := oprot.WriteFieldBegin("failureMessage", thrift.STRUCT, 500); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 500:failureMessage: ", p), err) }
    if err := p.FailureMessage.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.FailureMessage), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 500:failureMessage: ", p), err) }
  }
  return err
}

func (p *TEndpointMessage) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TEndpointMessage(%+v)", *p)
}

// Attributes:
//  - NumericStats
//  - Segments
type TEndpointStatsMessage struct {
  // unused fields # 1 to 99
  NumericStats map[string]float64 `thrift:"numericStats,100" db:"numericStats" json:"numericStats"`
  // unused fields # 101 to 199
  Segments map[string]string `thrift:"segments,200" db:"segments" json:"segments"`
}

func NewTEndpointStatsMessage() *TEndpointStatsMessage {
  return &TEndpointStatsMessage{}
}


func (p *TEndpointStatsMessage) GetNumericStats() map[string]float64 {
  return p.NumericStats
}

func (p *TEndpointStatsMessage) GetSegments() map[string]string {
  return p.Segments
}
func (p *TEndpointStatsMessage) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 100:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField100(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 200:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField200(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TEndpointStatsMessage)  ReadField100(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]float64, size)
  p.NumericStats =  tMap
  for i := 0; i < size; i ++ {
var _key14 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key14 = v
}
var _val15 float64
    if v, err := iprot.ReadDouble(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val15 = v
}
    p.NumericStats[_key14] = _val15
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TEndpointStatsMessage)  ReadField200(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Segments =  tMap
  for i := 0; i < size; i ++ {
var _key16 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key16 = v
}
var _val17 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val17 = v
}
    p.Segments[_key16] = _val17
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TEndpointStatsMessage) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TEndpointStatsMessage"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField100(oprot); err != nil { return err }
    if err := p.writeField200(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TEndpointStatsMessage) writeField100(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("numericStats", thrift.MAP, 100); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 100:numericStats: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.DOUBLE, len(p.NumericStats)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.NumericStats {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteDouble(float64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 100:numericStats: ", p), err) }
  return err
}

func (p *TEndpointStatsMessage) writeField200(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("segments", thrift.MAP, 200); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 200:segments: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Segments)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Segments {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 200:segments: ", p), err) }
  return err
}

func (p *TEndpointStatsMessage) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TEndpointStatsMessage(%+v)", *p)
}

// Attributes:
//  - Metadata
//  - Data
type TEndpointWrapper struct {
  // unused fields # 1 to 9
  Metadata map[string]string `thrift:"metadata,10" db:"metadata" json:"metadata"`
  // unused fields # 11 to 99
  Data []byte `thrift:"data,100" db:"data" json:"data"`
}

func NewTEndpointWrapper() *TEndpointWrapper {
  return &TEndpointWrapper{}
}


func (p *TEndpointWrapper) GetMetadata() map[string]string {
  return p.Metadata
}

func (p *TEndpointWrapper) GetData() []byte {
  return p.Data
}
func (p *TEndpointWrapper) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 100:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField100(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TEndpointWrapper)  ReadField10(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Metadata =  tMap
  for i := 0; i < size; i ++ {
var _key18 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key18 = v
}
var _val19 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val19 = v
}
    p.Metadata[_key18] = _val19
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TEndpointWrapper)  ReadField100(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 100: ", err)
} else {
  p.Data = v
}
  return nil
}

func (p *TEndpointWrapper) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TEndpointWrapper"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField100(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TEndpointWrapper) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("metadata", thrift.MAP, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:metadata: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Metadata)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Metadata {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:metadata: ", p), err) }
  return err
}

func (p *TEndpointWrapper) writeField100(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("data", thrift.STRING, 100); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 100:data: ", p), err) }
  if err := oprot.WriteBinary(p.Data); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.data (100) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 100:data: ", p), err) }
  return err
}

func (p *TEndpointWrapper) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TEndpointWrapper(%+v)", *p)
}

