// Autogenerated by Thrift Compiler (0.12.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package apm

import (
	"bytes"
	"context"
	"reflect"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// Attributes:
//  - Hostname
//  - IP
//  - AgentId
//  - AppName
//  - ClusterKey
//  - ServiceType
//  - DisplayName
//  - InstanceName
//  - ContainerId
//  - Pid
//  - ProjectId
//  - PodId
//  - CollectorId
//  - AppId
//  - Props
//  - Ports
//  - Ips
//  - Tier
//  - NamespaceName
//  - Created
//  - Updated
//  - Deleted
//  - ProfilingInfo
type TDiscoveryInfo struct {
  Hostname string `thrift:"hostname,1" db:"hostname" json:"hostname"`
  IP string `thrift:"ip,2" db:"ip" json:"ip"`
  AgentId string `thrift:"agentId,3" db:"agentId" json:"agentId"`
  AppName string `thrift:"appName,4" db:"appName" json:"appName"`
  ClusterKey string `thrift:"clusterKey,5" db:"clusterKey" json:"clusterKey"`
  ServiceType string `thrift:"serviceType,6" db:"serviceType" json:"serviceType"`
  DisplayName string `thrift:"displayName,7" db:"displayName" json:"displayName"`
  InstanceName string `thrift:"instanceName,8" db:"instanceName" json:"instanceName"`
  ContainerId string `thrift:"containerId,9" db:"containerId" json:"containerId"`
  Pid int32 `thrift:"pid,10" db:"pid" json:"pid"`
  // unused field # 11
  ProjectId string `thrift:"projectId,12" db:"projectId" json:"projectId"`
  PodId string `thrift:"podId,13" db:"podId" json:"podId"`
  CollectorId string `thrift:"collectorId,14" db:"collectorId" json:"collectorId"`
  AppId string `thrift:"appId,15" db:"appId" json:"appId"`
  // unused fields # 16 to 19
  Props map[string]string `thrift:"props,20" db:"props" json:"props"`
  // unused fields # 21 to 29
  Ports []int32 `thrift:"ports,30" db:"ports" json:"ports"`
  // unused fields # 31 to 39
  Ips []string `thrift:"ips,40" db:"ips" json:"ips"`
  // unused fields # 41 to 49
  Tier string `thrift:"tier,50" db:"tier" json:"tier"`
  // unused fields # 51 to 59
  NamespaceName string `thrift:"namespaceName,60" db:"namespaceName" json:"namespaceName"`
  Created int64 `thrift:"created,61" db:"created" json:"created"`
  Updated int64 `thrift:"updated,62" db:"updated" json:"updated"`
  Deleted int64 `thrift:"deleted,63" db:"deleted" json:"deleted"`
  // unused fields # 64 to 69
  ProfilingInfo []*TProfilingInfo `thrift:"profilingInfo,70" db:"profilingInfo" json:"profilingInfo,omitempty"`
}

func NewTDiscoveryInfo() *TDiscoveryInfo {
  return &TDiscoveryInfo{}
}


func (p *TDiscoveryInfo) GetHostname() string {
  return p.Hostname
}

func (p *TDiscoveryInfo) GetIP() string {
  return p.IP
}

func (p *TDiscoveryInfo) GetAgentId() string {
  return p.AgentId
}

func (p *TDiscoveryInfo) GetAppName() string {
  return p.AppName
}

func (p *TDiscoveryInfo) GetClusterKey() string {
  return p.ClusterKey
}

func (p *TDiscoveryInfo) GetServiceType() string {
  return p.ServiceType
}

func (p *TDiscoveryInfo) GetDisplayName() string {
  return p.DisplayName
}

func (p *TDiscoveryInfo) GetInstanceName() string {
  return p.InstanceName
}

func (p *TDiscoveryInfo) GetContainerId() string {
  return p.ContainerId
}

func (p *TDiscoveryInfo) GetPid() int32 {
  return p.Pid
}

func (p *TDiscoveryInfo) GetProjectId() string {
  return p.ProjectId
}

func (p *TDiscoveryInfo) GetPodId() string {
  return p.PodId
}

func (p *TDiscoveryInfo) GetCollectorId() string {
  return p.CollectorId
}

func (p *TDiscoveryInfo) GetAppId() string {
  return p.AppId
}

func (p *TDiscoveryInfo) GetProps() map[string]string {
  return p.Props
}

func (p *TDiscoveryInfo) GetPorts() []int32 {
  return p.Ports
}

func (p *TDiscoveryInfo) GetIps() []string {
  return p.Ips
}

func (p *TDiscoveryInfo) GetTier() string {
  return p.Tier
}

func (p *TDiscoveryInfo) GetNamespaceName() string {
  return p.NamespaceName
}

func (p *TDiscoveryInfo) GetCreated() int64 {
  return p.Created
}

func (p *TDiscoveryInfo) GetUpdated() int64 {
  return p.Updated
}

func (p *TDiscoveryInfo) GetDeleted() int64 {
  return p.Deleted
}
var TDiscoveryInfo_ProfilingInfo_DEFAULT []*TProfilingInfo

func (p *TDiscoveryInfo) GetProfilingInfo() []*TProfilingInfo {
  return p.ProfilingInfo
}
func (p *TDiscoveryInfo) IsSetProfilingInfo() bool {
  return p.ProfilingInfo != nil
}

func (p *TDiscoveryInfo) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField14(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField15(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField20(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 30:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField30(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 40:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField40(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 50:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField50(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 60:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField60(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 61:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField61(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 62:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField62(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 63:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField63(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 70:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField70(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDiscoveryInfo)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Hostname = v
}
  return nil
}

func (p *TDiscoveryInfo)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.IP = v
}
  return nil
}

func (p *TDiscoveryInfo)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.AgentId = v
}
  return nil
}

func (p *TDiscoveryInfo)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.AppName = v
}
  return nil
}

func (p *TDiscoveryInfo)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.ClusterKey = v
}
  return nil
}

func (p *TDiscoveryInfo)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.ServiceType = v
}
  return nil
}

func (p *TDiscoveryInfo)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.DisplayName = v
}
  return nil
}

func (p *TDiscoveryInfo)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.InstanceName = v
}
  return nil
}

func (p *TDiscoveryInfo)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.ContainerId = v
}
  return nil
}

func (p *TDiscoveryInfo)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Pid = v
}
  return nil
}

func (p *TDiscoveryInfo)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.ProjectId = v
}
  return nil
}

func (p *TDiscoveryInfo)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.PodId = v
}
  return nil
}

func (p *TDiscoveryInfo)  ReadField14(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.CollectorId = v
}
  return nil
}

func (p *TDiscoveryInfo)  ReadField15(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.AppId = v
}
  return nil
}

func (p *TDiscoveryInfo)  ReadField20(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Props =  tMap
  for i := 0; i < size; i ++ {
var _key0 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key0 = v
}
var _val1 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val1 = v
}
    p.Props[_key0] = _val1
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TDiscoveryInfo)  ReadField30(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.Ports =  tSlice
  for i := 0; i < size; i ++ {
var _elem2 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem2 = v
}
    p.Ports = append(p.Ports, _elem2)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TDiscoveryInfo)  ReadField40(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Ips =  tSlice
  for i := 0; i < size; i ++ {
var _elem3 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem3 = v
}
    p.Ips = append(p.Ips, _elem3)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TDiscoveryInfo)  ReadField50(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 50: ", err)
} else {
  p.Tier = v
}
  return nil
}

func (p *TDiscoveryInfo)  ReadField60(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 60: ", err)
} else {
  p.NamespaceName = v
}
  return nil
}

func (p *TDiscoveryInfo)  ReadField61(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 61: ", err)
} else {
  p.Created = v
}
  return nil
}

func (p *TDiscoveryInfo)  ReadField62(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 62: ", err)
} else {
  p.Updated = v
}
  return nil
}

func (p *TDiscoveryInfo)  ReadField63(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 63: ", err)
} else {
  p.Deleted = v
}
  return nil
}

func (p *TDiscoveryInfo)  ReadField70(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TProfilingInfo, 0, size)
  p.ProfilingInfo =  tSlice
  for i := 0; i < size; i ++ {
    _elem4 := &TProfilingInfo{}
    if err := _elem4.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem4), err)
    }
    p.ProfilingInfo = append(p.ProfilingInfo, _elem4)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TDiscoveryInfo) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TDiscoveryInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField30(oprot); err != nil { return err }
    if err := p.writeField40(oprot); err != nil { return err }
    if err := p.writeField50(oprot); err != nil { return err }
    if err := p.writeField60(oprot); err != nil { return err }
    if err := p.writeField61(oprot); err != nil { return err }
    if err := p.writeField62(oprot); err != nil { return err }
    if err := p.writeField63(oprot); err != nil { return err }
    if err := p.writeField70(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDiscoveryInfo) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("hostname", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hostname: ", p), err) }
  if err := oprot.WriteString(string(p.Hostname)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hostname (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hostname: ", p), err) }
  return err
}

func (p *TDiscoveryInfo) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ip", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ip: ", p), err) }
  if err := oprot.WriteString(string(p.IP)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ip (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ip: ", p), err) }
  return err
}

func (p *TDiscoveryInfo) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("agentId", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:agentId: ", p), err) }
  if err := oprot.WriteString(string(p.AgentId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agentId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:agentId: ", p), err) }
  return err
}

func (p *TDiscoveryInfo) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appName", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:appName: ", p), err) }
  if err := oprot.WriteString(string(p.AppName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appName (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:appName: ", p), err) }
  return err
}

func (p *TDiscoveryInfo) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("clusterKey", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:clusterKey: ", p), err) }
  if err := oprot.WriteString(string(p.ClusterKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.clusterKey (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:clusterKey: ", p), err) }
  return err
}

func (p *TDiscoveryInfo) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("serviceType", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:serviceType: ", p), err) }
  if err := oprot.WriteString(string(p.ServiceType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.serviceType (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:serviceType: ", p), err) }
  return err
}

func (p *TDiscoveryInfo) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("displayName", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:displayName: ", p), err) }
  if err := oprot.WriteString(string(p.DisplayName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.displayName (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:displayName: ", p), err) }
  return err
}

func (p *TDiscoveryInfo) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("instanceName", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:instanceName: ", p), err) }
  if err := oprot.WriteString(string(p.InstanceName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.instanceName (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:instanceName: ", p), err) }
  return err
}

func (p *TDiscoveryInfo) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("containerId", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:containerId: ", p), err) }
  if err := oprot.WriteString(string(p.ContainerId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.containerId (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:containerId: ", p), err) }
  return err
}

func (p *TDiscoveryInfo) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pid", thrift.I32, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:pid: ", p), err) }
  if err := oprot.WriteI32(int32(p.Pid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pid (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:pid: ", p), err) }
  return err
}

func (p *TDiscoveryInfo) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("projectId", thrift.STRING, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:projectId: ", p), err) }
  if err := oprot.WriteString(string(p.ProjectId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.projectId (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:projectId: ", p), err) }
  return err
}

func (p *TDiscoveryInfo) writeField13(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("podId", thrift.STRING, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:podId: ", p), err) }
  if err := oprot.WriteString(string(p.PodId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.podId (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:podId: ", p), err) }
  return err
}

func (p *TDiscoveryInfo) writeField14(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("collectorId", thrift.STRING, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:collectorId: ", p), err) }
  if err := oprot.WriteString(string(p.CollectorId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.collectorId (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:collectorId: ", p), err) }
  return err
}

func (p *TDiscoveryInfo) writeField15(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appId", thrift.STRING, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:appId: ", p), err) }
  if err := oprot.WriteString(string(p.AppId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appId (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:appId: ", p), err) }
  return err
}

func (p *TDiscoveryInfo) writeField20(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("props", thrift.MAP, 20); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:props: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Props)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Props {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 20:props: ", p), err) }
  return err
}

func (p *TDiscoveryInfo) writeField30(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ports", thrift.LIST, 30); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:ports: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I32, len(p.Ports)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Ports {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 30:ports: ", p), err) }
  return err
}

func (p *TDiscoveryInfo) writeField40(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ips", thrift.LIST, 40); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:ips: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Ips)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Ips {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 40:ips: ", p), err) }
  return err
}

func (p *TDiscoveryInfo) writeField50(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tier", thrift.STRING, 50); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 50:tier: ", p), err) }
  if err := oprot.WriteString(string(p.Tier)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tier (50) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 50:tier: ", p), err) }
  return err
}

func (p *TDiscoveryInfo) writeField60(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("namespaceName", thrift.STRING, 60); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 60:namespaceName: ", p), err) }
  if err := oprot.WriteString(string(p.NamespaceName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.namespaceName (60) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 60:namespaceName: ", p), err) }
  return err
}

func (p *TDiscoveryInfo) writeField61(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("created", thrift.I64, 61); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 61:created: ", p), err) }
  if err := oprot.WriteI64(int64(p.Created)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.created (61) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 61:created: ", p), err) }
  return err
}

func (p *TDiscoveryInfo) writeField62(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("updated", thrift.I64, 62); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 62:updated: ", p), err) }
  if err := oprot.WriteI64(int64(p.Updated)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.updated (62) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 62:updated: ", p), err) }
  return err
}

func (p *TDiscoveryInfo) writeField63(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("deleted", thrift.I64, 63); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 63:deleted: ", p), err) }
  if err := oprot.WriteI64(int64(p.Deleted)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.deleted (63) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 63:deleted: ", p), err) }
  return err
}

func (p *TDiscoveryInfo) writeField70(oprot thrift.TProtocol) (err error) {
  if p.IsSetProfilingInfo() {
    if err := oprot.WriteFieldBegin("profilingInfo", thrift.LIST, 70); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 70:profilingInfo: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ProfilingInfo)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.ProfilingInfo {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 70:profilingInfo: ", p), err) }
  }
  return err
}

func (p *TDiscoveryInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDiscoveryInfo(%+v)", *p)
}

// Attributes:
//  - Pointcut
//  - Requests
//  - ElapsedMs
//  - Status
//  - Exclusion
type TProfilingInfo struct {
  Pointcut string `thrift:"pointcut,1" db:"pointcut" json:"pointcut"`
  Requests int32 `thrift:"requests,2" db:"requests" json:"requests"`
  ElapsedMs int64 `thrift:"elapsedMs,3" db:"elapsedMs" json:"elapsedMs"`
  Status int32 `thrift:"status,4" db:"status" json:"status"`
  Exclusion string `thrift:"exclusion,5" db:"exclusion" json:"exclusion"`
}

func NewTProfilingInfo() *TProfilingInfo {
  return &TProfilingInfo{}
}


func (p *TProfilingInfo) GetPointcut() string {
  return p.Pointcut
}

func (p *TProfilingInfo) GetRequests() int32 {
  return p.Requests
}

func (p *TProfilingInfo) GetElapsedMs() int64 {
  return p.ElapsedMs
}

func (p *TProfilingInfo) GetStatus() int32 {
  return p.Status
}

func (p *TProfilingInfo) GetExclusion() string {
  return p.Exclusion
}
func (p *TProfilingInfo) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TProfilingInfo)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Pointcut = v
}
  return nil
}

func (p *TProfilingInfo)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Requests = v
}
  return nil
}

func (p *TProfilingInfo)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ElapsedMs = v
}
  return nil
}

func (p *TProfilingInfo)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *TProfilingInfo)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Exclusion = v
}
  return nil
}

func (p *TProfilingInfo) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TProfilingInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TProfilingInfo) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pointcut", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:pointcut: ", p), err) }
  if err := oprot.WriteString(string(p.Pointcut)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pointcut (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:pointcut: ", p), err) }
  return err
}

func (p *TProfilingInfo) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("requests", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requests: ", p), err) }
  if err := oprot.WriteI32(int32(p.Requests)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.requests (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requests: ", p), err) }
  return err
}

func (p *TProfilingInfo) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("elapsedMs", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:elapsedMs: ", p), err) }
  if err := oprot.WriteI64(int64(p.ElapsedMs)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.elapsedMs (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:elapsedMs: ", p), err) }
  return err
}

func (p *TProfilingInfo) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:status: ", p), err) }
  if err := oprot.WriteI32(int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:status: ", p), err) }
  return err
}

func (p *TProfilingInfo) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("exclusion", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:exclusion: ", p), err) }
  if err := oprot.WriteString(string(p.Exclusion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.exclusion (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:exclusion: ", p), err) }
  return err
}

func (p *TProfilingInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TProfilingInfo(%+v)", *p)
}

// Attributes:
//  - Kind
//  - Metadata
//  - Items
//  - ProfilingInfo
type TInventoryInfo struct {
  Kind string `thrift:"kind,1" db:"kind" json:"kind"`
  Metadata map[string]string `thrift:"metadata,2" db:"metadata" json:"metadata"`
  Items []*TItem `thrift:"items,3" db:"items" json:"items"`
  // unused fields # 4 to 69
  ProfilingInfo []*TProfilingInfo `thrift:"profilingInfo,70" db:"profilingInfo" json:"profilingInfo,omitempty"`
}

func NewTInventoryInfo() *TInventoryInfo {
  return &TInventoryInfo{}
}


func (p *TInventoryInfo) GetKind() string {
  return p.Kind
}

func (p *TInventoryInfo) GetMetadata() map[string]string {
  return p.Metadata
}

func (p *TInventoryInfo) GetItems() []*TItem {
  return p.Items
}
var TInventoryInfo_ProfilingInfo_DEFAULT []*TProfilingInfo

func (p *TInventoryInfo) GetProfilingInfo() []*TProfilingInfo {
  return p.ProfilingInfo
}
func (p *TInventoryInfo) IsSetProfilingInfo() bool {
  return p.ProfilingInfo != nil
}

func (p *TInventoryInfo) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 70:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField70(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TInventoryInfo)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Kind = v
}
  return nil
}

func (p *TInventoryInfo)  ReadField2(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Metadata =  tMap
  for i := 0; i < size; i ++ {
var _key5 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key5 = v
}
var _val6 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val6 = v
}
    p.Metadata[_key5] = _val6
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TInventoryInfo)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TItem, 0, size)
  p.Items =  tSlice
  for i := 0; i < size; i ++ {
    _elem7 := &TItem{}
    if err := _elem7.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem7), err)
    }
    p.Items = append(p.Items, _elem7)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TInventoryInfo)  ReadField70(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TProfilingInfo, 0, size)
  p.ProfilingInfo =  tSlice
  for i := 0; i < size; i ++ {
    _elem8 := &TProfilingInfo{}
    if err := _elem8.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem8), err)
    }
    p.ProfilingInfo = append(p.ProfilingInfo, _elem8)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TInventoryInfo) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TInventoryInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField70(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TInventoryInfo) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("kind", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:kind: ", p), err) }
  if err := oprot.WriteString(string(p.Kind)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.kind (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:kind: ", p), err) }
  return err
}

func (p *TInventoryInfo) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("metadata", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:metadata: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Metadata)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Metadata {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:metadata: ", p), err) }
  return err
}

func (p *TInventoryInfo) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("items", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:items: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Items {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:items: ", p), err) }
  return err
}

func (p *TInventoryInfo) writeField70(oprot thrift.TProtocol) (err error) {
  if p.IsSetProfilingInfo() {
    if err := oprot.WriteFieldBegin("profilingInfo", thrift.LIST, 70); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 70:profilingInfo: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ProfilingInfo)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.ProfilingInfo {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 70:profilingInfo: ", p), err) }
  }
  return err
}

func (p *TInventoryInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TInventoryInfo(%+v)", *p)
}

// Attributes:
//  - Metadata
//  - Labels
//  - Spec
type TItem struct {
  Metadata *TMetadata `thrift:"metadata,1" db:"metadata" json:"metadata"`
  Labels map[string]string `thrift:"labels,2" db:"labels" json:"labels"`
  Spec *TSpec `thrift:"spec,3" db:"spec" json:"spec"`
}

func NewTItem() *TItem {
  return &TItem{}
}

var TItem_Metadata_DEFAULT *TMetadata
func (p *TItem) GetMetadata() *TMetadata {
  if !p.IsSetMetadata() {
    return TItem_Metadata_DEFAULT
  }
return p.Metadata
}

func (p *TItem) GetLabels() map[string]string {
  return p.Labels
}
var TItem_Spec_DEFAULT *TSpec
func (p *TItem) GetSpec() *TSpec {
  if !p.IsSetSpec() {
    return TItem_Spec_DEFAULT
  }
return p.Spec
}
func (p *TItem) IsSetMetadata() bool {
  return p.Metadata != nil
}

func (p *TItem) IsSetSpec() bool {
  return p.Spec != nil
}

func (p *TItem) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TItem)  ReadField1(iprot thrift.TProtocol) error {
  p.Metadata = &TMetadata{}
  if err := p.Metadata.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Metadata), err)
  }
  return nil
}

func (p *TItem)  ReadField2(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Labels =  tMap
  for i := 0; i < size; i ++ {
var _key9 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key9 = v
}
var _val10 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val10 = v
}
    p.Labels[_key9] = _val10
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TItem)  ReadField3(iprot thrift.TProtocol) error {
  p.Spec = &TSpec{}
  if err := p.Spec.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Spec), err)
  }
  return nil
}

func (p *TItem) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TItem"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TItem) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("metadata", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:metadata: ", p), err) }
  if err := p.Metadata.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Metadata), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:metadata: ", p), err) }
  return err
}

func (p *TItem) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("labels", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:labels: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Labels)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Labels {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:labels: ", p), err) }
  return err
}

func (p *TItem) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("spec", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:spec: ", p), err) }
  if err := p.Spec.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Spec), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:spec: ", p), err) }
  return err
}

func (p *TItem) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TItem(%+v)", *p)
}

// Attributes:
//  - Name
//  - Type
//  - ID
//  - SchemaVersion
//  - Created
//  - Updated
//  - References
type TMetadata struct {
  Name string `thrift:"name,1" db:"name" json:"name"`
  Type string `thrift:"type,2" db:"type" json:"type"`
  ID string `thrift:"id,3" db:"id" json:"id"`
  SchemaVersion string `thrift:"schemaVersion,4" db:"schemaVersion" json:"schemaVersion"`
  Created int64 `thrift:"created,5" db:"created" json:"created"`
  Updated int64 `thrift:"updated,6" db:"updated" json:"updated"`
  References []*TReference `thrift:"references,7" db:"references" json:"references"`
}

func NewTMetadata() *TMetadata {
  return &TMetadata{}
}


func (p *TMetadata) GetName() string {
  return p.Name
}

func (p *TMetadata) GetType() string {
  return p.Type
}

func (p *TMetadata) GetID() string {
  return p.ID
}

func (p *TMetadata) GetSchemaVersion() string {
  return p.SchemaVersion
}

func (p *TMetadata) GetCreated() int64 {
  return p.Created
}

func (p *TMetadata) GetUpdated() int64 {
  return p.Updated
}

func (p *TMetadata) GetReferences() []*TReference {
  return p.References
}
func (p *TMetadata) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TMetadata)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *TMetadata)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Type = v
}
  return nil
}

func (p *TMetadata)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TMetadata)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.SchemaVersion = v
}
  return nil
}

func (p *TMetadata)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Created = v
}
  return nil
}

func (p *TMetadata)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Updated = v
}
  return nil
}

func (p *TMetadata)  ReadField7(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TReference, 0, size)
  p.References =  tSlice
  for i := 0; i < size; i ++ {
    _elem11 := &TReference{}
    if err := _elem11.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem11), err)
    }
    p.References = append(p.References, _elem11)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TMetadata) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TMetadata"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TMetadata) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *TMetadata) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err) }
  if err := oprot.WriteString(string(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err) }
  return err
}

func (p *TMetadata) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:id: ", p), err) }
  if err := oprot.WriteString(string(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:id: ", p), err) }
  return err
}

func (p *TMetadata) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("schemaVersion", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:schemaVersion: ", p), err) }
  if err := oprot.WriteString(string(p.SchemaVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.schemaVersion (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:schemaVersion: ", p), err) }
  return err
}

func (p *TMetadata) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("created", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:created: ", p), err) }
  if err := oprot.WriteI64(int64(p.Created)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.created (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:created: ", p), err) }
  return err
}

func (p *TMetadata) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("updated", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:updated: ", p), err) }
  if err := oprot.WriteI64(int64(p.Updated)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.updated (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:updated: ", p), err) }
  return err
}

func (p *TMetadata) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("references", thrift.LIST, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:references: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.References)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.References {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:references: ", p), err) }
  return err
}

func (p *TMetadata) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TMetadata(%+v)", *p)
}

// Attributes:
//  - Kind
//  - Name
//  - References
type TReference struct {
  Kind string `thrift:"kind,1" db:"kind" json:"kind"`
  Name string `thrift:"name,2" db:"name" json:"name"`
  References []map[string]string `thrift:"references,3" db:"references" json:"references"`
}

func NewTReference() *TReference {
  return &TReference{}
}


func (p *TReference) GetKind() string {
  return p.Kind
}

func (p *TReference) GetName() string {
  return p.Name
}

func (p *TReference) GetReferences() []map[string]string {
  return p.References
}
func (p *TReference) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TReference)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Kind = v
}
  return nil
}

func (p *TReference)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *TReference)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]map[string]string, 0, size)
  p.References =  tSlice
  for i := 0; i < size; i ++ {
    _, _, size, err := iprot.ReadMapBegin()
    if err != nil {
      return thrift.PrependError("error reading map begin: ", err)
    }
    tMap := make(map[string]string, size)
    _elem12 :=  tMap
    for i := 0; i < size; i ++ {
var _key13 string
      if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
} else {
      _key13 = v
}
var _val14 string
      if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
} else {
      _val14 = v
}
      _elem12[_key13] = _val14
    }
    if err := iprot.ReadMapEnd(); err != nil {
      return thrift.PrependError("error reading map end: ", err)
    }
    p.References = append(p.References, _elem12)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TReference) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TReference"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TReference) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("kind", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:kind: ", p), err) }
  if err := oprot.WriteString(string(p.Kind)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.kind (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:kind: ", p), err) }
  return err
}

func (p *TReference) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  return err
}

func (p *TReference) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("references", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:references: ", p), err) }
  if err := oprot.WriteListBegin(thrift.MAP, len(p.References)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.References {
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(v)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range v {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:references: ", p), err) }
  return err
}

func (p *TReference) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TReference(%+v)", *p)
}

// Attributes:
//  - Properties
//  - Ips
//  - Ports
type TSpec struct {
  Properties map[string]string `thrift:"properties,1" db:"properties" json:"properties"`
  Ips []string `thrift:"ips,2" db:"ips" json:"ips"`
  Ports []int32 `thrift:"ports,3" db:"ports" json:"ports"`
}

func NewTSpec() *TSpec {
  return &TSpec{}
}


func (p *TSpec) GetProperties() map[string]string {
  return p.Properties
}

func (p *TSpec) GetIps() []string {
  return p.Ips
}

func (p *TSpec) GetPorts() []int32 {
  return p.Ports
}
func (p *TSpec) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSpec)  ReadField1(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Properties =  tMap
  for i := 0; i < size; i ++ {
var _key15 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key15 = v
}
var _val16 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val16 = v
}
    p.Properties[_key15] = _val16
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TSpec)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Ips =  tSlice
  for i := 0; i < size; i ++ {
var _elem17 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem17 = v
}
    p.Ips = append(p.Ips, _elem17)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TSpec)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.Ports =  tSlice
  for i := 0; i < size; i ++ {
var _elem18 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem18 = v
}
    p.Ports = append(p.Ports, _elem18)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TSpec) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TSpec"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSpec) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("properties", thrift.MAP, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:properties: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Properties)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Properties {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:properties: ", p), err) }
  return err
}

func (p *TSpec) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ips", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ips: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Ips)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Ips {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ips: ", p), err) }
  return err
}

func (p *TSpec) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ports", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ports: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I32, len(p.Ports)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Ports {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ports: ", p), err) }
  return err
}

func (p *TSpec) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSpec(%+v)", *p)
}

