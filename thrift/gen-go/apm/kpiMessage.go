// Autogenerated by Thrift Compiler (0.12.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package apm

import (
	"bytes"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"reflect"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

type SpanType int64

const (
	SpanType_INTERMEDIATE       SpanType = 0
	SpanType_FIRST_FOR_BACKEND  SpanType = 1
	SpanType_FIRST_FOR_CLIENT   SpanType = 2
	SpanType_FIRST_FOR_UNKNOWN  SpanType = 3
	SpanType_FIRST_FOR_ENDPOINT SpanType = 4
	SpanType_ENDPOINT           SpanType = 5
	SpanType_EXTERNAL           SpanType = 6
	SpanType_FIRST_EXTERNAL     SpanType = 7
	SpanType_ENDPOINT_EXTERNAL  SpanType = 8
)

func (p SpanType) String() string {
	switch p {
	case SpanType_INTERMEDIATE:
		return "INTERMEDIATE"
	case SpanType_FIRST_FOR_BACKEND:
		return "FIRST_FOR_BACKEND"
	case SpanType_FIRST_FOR_CLIENT:
		return "FIRST_FOR_CLIENT"
	case SpanType_FIRST_FOR_UNKNOWN:
		return "FIRST_FOR_UNKNOWN"
	case SpanType_FIRST_FOR_ENDPOINT:
		return "FIRST_FOR_ENDPOINT"
	case SpanType_ENDPOINT:
		return "ENDPOINT"
	case SpanType_EXTERNAL:
		return "EXTERNAL"
	case SpanType_FIRST_EXTERNAL:
		return "FIRST_EXTERNAL"
	case SpanType_ENDPOINT_EXTERNAL:
		return "ENDPOINT_EXTERNAL"
	}
	return "<UNSET>"
}

func SpanTypeFromString(s string) (SpanType, error) {
	switch s {
	case "INTERMEDIATE":
		return SpanType_INTERMEDIATE, nil
	case "FIRST_FOR_BACKEND":
		return SpanType_FIRST_FOR_BACKEND, nil
	case "FIRST_FOR_CLIENT":
		return SpanType_FIRST_FOR_CLIENT, nil
	case "FIRST_FOR_UNKNOWN":
		return SpanType_FIRST_FOR_UNKNOWN, nil
	case "FIRST_FOR_ENDPOINT":
		return SpanType_FIRST_FOR_ENDPOINT, nil
	case "ENDPOINT":
		return SpanType_ENDPOINT, nil
	case "EXTERNAL":
		return SpanType_EXTERNAL, nil
	case "FIRST_EXTERNAL":
		return SpanType_FIRST_EXTERNAL, nil
	case "ENDPOINT_EXTERNAL":
		return SpanType_ENDPOINT_EXTERNAL, nil
	}
	return SpanType(0), fmt.Errorf("not a valid SpanType string")
}

func SpanTypePtr(v SpanType) *SpanType { return &v }

func (p SpanType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *SpanType) UnmarshalText(text []byte) error {
	q, err := SpanTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *SpanType) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = SpanType(v)
	return nil
}

func (p *SpanType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

// Attributes:
//  - SourceResouceId
//  - DestResouceId
//  - TransactionType
//  - AppId
//  - SelfErrorLatency
//  - Throughput
//  - SelfLatency
//  - SelfActiveLatency
//  - TotalLatency
//  - TotalActiveLatency
//  - SpanType
//  - TotalLatencyList
//  - TotalErrorIndicatorList
//  - TotalErrorLatency
//  - NamespaceName
//  - SrcTierName
//  - DestTierName
type TKpiMessage struct {
	// unused fields # 1 to 9
	SourceResouceId string `thrift:"sourceResouceId,10" db:"sourceResouceId" json:"sourceResouceId"`
	// unused fields # 11 to 19
	DestResouceId string `thrift:"destResouceId,20" db:"destResouceId" json:"destResouceId"`
	// unused fields # 21 to 29
	TransactionType string `thrift:"transactionType,30" db:"transactionType" json:"transactionType"`
	// unused fields # 31 to 39
	AppId string `thrift:"appId,40" db:"appId" json:"appId"`
	// unused fields # 41 to 49
	SelfErrorLatency []byte `thrift:"selfErrorLatency,50" db:"selfErrorLatency" json:"selfErrorLatency"`
	// unused fields # 51 to 59
	Throughput int32 `thrift:"throughput,60" db:"throughput" json:"throughput"`
	// unused fields # 61 to 69
	SelfLatency       []byte `thrift:"selfLatency,70" db:"selfLatency" json:"selfLatency"`
	SelfActiveLatency []byte `thrift:"selfActiveLatency,71" db:"selfActiveLatency" json:"selfActiveLatency"`
	// unused fields # 72 to 79
	TotalLatency       []byte `thrift:"totalLatency,80" db:"totalLatency" json:"totalLatency"`
	TotalActiveLatency []byte `thrift:"totalActiveLatency,81" db:"totalActiveLatency" json:"totalActiveLatency"`
	// unused fields # 82 to 89
	SpanType SpanType `thrift:"spanType,90" db:"spanType" json:"spanType"`
	// unused fields # 91 to 109
	TotalLatencyList []int32 `thrift:"totalLatencyList,110" db:"totalLatencyList" json:"totalLatencyList"`
	// unused fields # 111 to 119
	TotalErrorIndicatorList []bool `thrift:"totalErrorIndicatorList,120" db:"totalErrorIndicatorList" json:"totalErrorIndicatorList"`
	TotalErrorLatency       []byte `thrift:"totalErrorLatency,121" db:"totalErrorLatency" json:"totalErrorLatency"`
	// unused fields # 122 to 129
	NamespaceName string `thrift:"namespaceName,130" db:"namespaceName" json:"namespaceName"`
	// unused fields # 131 to 139
	SrcTierName string `thrift:"srcTierName,140" db:"srcTierName" json:"srcTierName,omitempty"`
	// unused fields # 141 to 149
	DestTierName string `thrift:"destTierName,150" db:"destTierName" json:"destTierName,omitempty"`
}

func NewTKpiMessage() *TKpiMessage {
	return &TKpiMessage{}
}

func (p *TKpiMessage) GetSourceResouceId() string {
	return p.SourceResouceId
}

func (p *TKpiMessage) GetDestResouceId() string {
	return p.DestResouceId
}

func (p *TKpiMessage) GetTransactionType() string {
	return p.TransactionType
}

func (p *TKpiMessage) GetAppId() string {
	return p.AppId
}

func (p *TKpiMessage) GetSelfErrorLatency() []byte {
	return p.SelfErrorLatency
}

func (p *TKpiMessage) GetThroughput() int32 {
	return p.Throughput
}

func (p *TKpiMessage) GetSelfLatency() []byte {
	return p.SelfLatency
}

func (p *TKpiMessage) GetSelfActiveLatency() []byte {
	return p.SelfActiveLatency
}

func (p *TKpiMessage) GetTotalLatency() []byte {
	return p.TotalLatency
}

func (p *TKpiMessage) GetTotalActiveLatency() []byte {
	return p.TotalActiveLatency
}

func (p *TKpiMessage) GetSpanType() SpanType {
	return p.SpanType
}

func (p *TKpiMessage) GetTotalLatencyList() []int32 {
	return p.TotalLatencyList
}

func (p *TKpiMessage) GetTotalErrorIndicatorList() []bool {
	return p.TotalErrorIndicatorList
}

func (p *TKpiMessage) GetTotalErrorLatency() []byte {
	return p.TotalErrorLatency
}

func (p *TKpiMessage) GetNamespaceName() string {
	return p.NamespaceName
}

var TKpiMessage_SrcTierName_DEFAULT string = ""

func (p *TKpiMessage) GetSrcTierName() string {
	return p.SrcTierName
}

var TKpiMessage_DestTierName_DEFAULT string = ""

func (p *TKpiMessage) GetDestTierName() string {
	return p.DestTierName
}
func (p *TKpiMessage) IsSetSrcTierName() bool {
	return p.SrcTierName != TKpiMessage_SrcTierName_DEFAULT
}

func (p *TKpiMessage) IsSetDestTierName() bool {
	return p.DestTierName != TKpiMessage_DestTierName_DEFAULT
}

func (p *TKpiMessage) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 10:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField10(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 20:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField20(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 30:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField30(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 40:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField40(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 50:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField50(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 60:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField60(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 70:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField70(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 71:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField71(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 80:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField80(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 81:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField81(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 90:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField90(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 110:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField110(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 120:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField120(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 121:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField121(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 130:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField130(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 140:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField140(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 150:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField150(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TKpiMessage) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.SourceResouceId = v
	}
	return nil
}

func (p *TKpiMessage) ReadField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 20: ", err)
	} else {
		p.DestResouceId = v
	}
	return nil
}

func (p *TKpiMessage) ReadField30(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 30: ", err)
	} else {
		p.TransactionType = v
	}
	return nil
}

func (p *TKpiMessage) ReadField40(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 40: ", err)
	} else {
		p.AppId = v
	}
	return nil
}

func (p *TKpiMessage) ReadField50(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 50: ", err)
	} else {
		p.SelfErrorLatency = v
	}
	return nil
}

func (p *TKpiMessage) ReadField60(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 60: ", err)
	} else {
		p.Throughput = v
	}
	return nil
}

func (p *TKpiMessage) ReadField70(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 70: ", err)
	} else {
		p.SelfLatency = v
	}
	return nil
}

func (p *TKpiMessage) ReadField71(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 71: ", err)
	} else {
		p.SelfActiveLatency = v
	}
	return nil
}

func (p *TKpiMessage) ReadField80(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 80: ", err)
	} else {
		p.TotalLatency = v
	}
	return nil
}

func (p *TKpiMessage) ReadField81(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 81: ", err)
	} else {
		p.TotalActiveLatency = v
	}
	return nil
}

func (p *TKpiMessage) ReadField90(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 90: ", err)
	} else {
		temp := SpanType(v)
		p.SpanType = temp
	}
	return nil
}

func (p *TKpiMessage) ReadField110(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int32, 0, size)
	p.TotalLatencyList = tSlice
	for i := 0; i < size; i++ {
		var _elem0 int32
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem0 = v
		}
		p.TotalLatencyList = append(p.TotalLatencyList, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TKpiMessage) ReadField120(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]bool, 0, size)
	p.TotalErrorIndicatorList = tSlice
	for i := 0; i < size; i++ {
		var _elem1 bool
		if v, err := iprot.ReadBool(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem1 = v
		}
		p.TotalErrorIndicatorList = append(p.TotalErrorIndicatorList, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TKpiMessage) ReadField121(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 121: ", err)
	} else {
		p.TotalErrorLatency = v
	}
	return nil
}

func (p *TKpiMessage) ReadField130(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 130: ", err)
	} else {
		p.NamespaceName = v
	}
	return nil
}

func (p *TKpiMessage) ReadField140(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 140: ", err)
	} else {
		p.SrcTierName = v
	}
	return nil
}

func (p *TKpiMessage) ReadField150(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 150: ", err)
	} else {
		p.DestTierName = v
	}
	return nil
}

func (p *TKpiMessage) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TKpiMessage"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField10(oprot); err != nil {
			return err
		}
		if err := p.writeField20(oprot); err != nil {
			return err
		}
		if err := p.writeField30(oprot); err != nil {
			return err
		}
		if err := p.writeField40(oprot); err != nil {
			return err
		}
		if err := p.writeField50(oprot); err != nil {
			return err
		}
		if err := p.writeField60(oprot); err != nil {
			return err
		}
		if err := p.writeField70(oprot); err != nil {
			return err
		}
		if err := p.writeField71(oprot); err != nil {
			return err
		}
		if err := p.writeField80(oprot); err != nil {
			return err
		}
		if err := p.writeField81(oprot); err != nil {
			return err
		}
		if err := p.writeField90(oprot); err != nil {
			return err
		}
		if err := p.writeField110(oprot); err != nil {
			return err
		}
		if err := p.writeField120(oprot); err != nil {
			return err
		}
		if err := p.writeField121(oprot); err != nil {
			return err
		}
		if err := p.writeField130(oprot); err != nil {
			return err
		}
		if err := p.writeField140(oprot); err != nil {
			return err
		}
		if err := p.writeField150(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TKpiMessage) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sourceResouceId", thrift.STRING, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:sourceResouceId: ", p), err)
	}
	if err := oprot.WriteString(string(p.SourceResouceId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sourceResouceId (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:sourceResouceId: ", p), err)
	}
	return err
}

func (p *TKpiMessage) writeField20(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("destResouceId", thrift.STRING, 20); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:destResouceId: ", p), err)
	}
	if err := oprot.WriteString(string(p.DestResouceId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.destResouceId (20) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 20:destResouceId: ", p), err)
	}
	return err
}

func (p *TKpiMessage) writeField30(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("transactionType", thrift.STRING, 30); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:transactionType: ", p), err)
	}
	if err := oprot.WriteString(string(p.TransactionType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.transactionType (30) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 30:transactionType: ", p), err)
	}
	return err
}

func (p *TKpiMessage) writeField40(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("appId", thrift.STRING, 40); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:appId: ", p), err)
	}
	if err := oprot.WriteString(string(p.AppId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.appId (40) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 40:appId: ", p), err)
	}
	return err
}

func (p *TKpiMessage) writeField50(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("selfErrorLatency", thrift.STRING, 50); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 50:selfErrorLatency: ", p), err)
	}
	if err := oprot.WriteBinary(p.SelfErrorLatency); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.selfErrorLatency (50) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 50:selfErrorLatency: ", p), err)
	}
	return err
}

func (p *TKpiMessage) writeField60(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("throughput", thrift.I32, 60); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 60:throughput: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Throughput)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.throughput (60) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 60:throughput: ", p), err)
	}
	return err
}

func (p *TKpiMessage) writeField70(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("selfLatency", thrift.STRING, 70); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 70:selfLatency: ", p), err)
	}
	if err := oprot.WriteBinary(p.SelfLatency); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.selfLatency (70) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 70:selfLatency: ", p), err)
	}
	return err
}

func (p *TKpiMessage) writeField71(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("selfActiveLatency", thrift.STRING, 71); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 71:selfActiveLatency: ", p), err)
	}
	if err := oprot.WriteBinary(p.SelfActiveLatency); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.selfActiveLatency (71) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 71:selfActiveLatency: ", p), err)
	}
	return err
}

func (p *TKpiMessage) writeField80(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("totalLatency", thrift.STRING, 80); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 80:totalLatency: ", p), err)
	}
	if err := oprot.WriteBinary(p.TotalLatency); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.totalLatency (80) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 80:totalLatency: ", p), err)
	}
	return err
}

func (p *TKpiMessage) writeField81(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("totalActiveLatency", thrift.STRING, 81); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 81:totalActiveLatency: ", p), err)
	}
	if err := oprot.WriteBinary(p.TotalActiveLatency); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.totalActiveLatency (81) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 81:totalActiveLatency: ", p), err)
	}
	return err
}

func (p *TKpiMessage) writeField90(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("spanType", thrift.I32, 90); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 90:spanType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SpanType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.spanType (90) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 90:spanType: ", p), err)
	}
	return err
}

func (p *TKpiMessage) writeField110(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("totalLatencyList", thrift.LIST, 110); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 110:totalLatencyList: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.TotalLatencyList)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.TotalLatencyList {
		if err := oprot.WriteI32(int32(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 110:totalLatencyList: ", p), err)
	}
	return err
}

func (p *TKpiMessage) writeField120(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("totalErrorIndicatorList", thrift.LIST, 120); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 120:totalErrorIndicatorList: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.BOOL, len(p.TotalErrorIndicatorList)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.TotalErrorIndicatorList {
		if err := oprot.WriteBool(bool(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 120:totalErrorIndicatorList: ", p), err)
	}
	return err
}

func (p *TKpiMessage) writeField121(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("totalErrorLatency", thrift.STRING, 121); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 121:totalErrorLatency: ", p), err)
	}
	if err := oprot.WriteBinary(p.TotalErrorLatency); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.totalErrorLatency (121) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 121:totalErrorLatency: ", p), err)
	}
	return err
}

func (p *TKpiMessage) writeField130(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("namespaceName", thrift.STRING, 130); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 130:namespaceName: ", p), err)
	}
	if err := oprot.WriteString(string(p.NamespaceName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.namespaceName (130) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 130:namespaceName: ", p), err)
	}
	return err
}

func (p *TKpiMessage) writeField140(oprot thrift.TProtocol) (err error) {
	if p.IsSetSrcTierName() {
		if err := oprot.WriteFieldBegin("srcTierName", thrift.STRING, 140); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 140:srcTierName: ", p), err)
		}
		if err := oprot.WriteString(string(p.SrcTierName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.srcTierName (140) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 140:srcTierName: ", p), err)
		}
	}
	return err
}

func (p *TKpiMessage) writeField150(oprot thrift.TProtocol) (err error) {
	if p.IsSetDestTierName() {
		if err := oprot.WriteFieldBegin("destTierName", thrift.STRING, 150); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 150:destTierName: ", p), err)
		}
		if err := oprot.WriteString(string(p.DestTierName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.destTierName (150) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 150:destTierName: ", p), err)
		}
	}
	return err
}

func (p *TKpiMessage) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TKpiMessage(%+v)", *p)
}

// Attributes:
//  - Kpi
//  - PartitionKey
//  - UtcTimeMin
//  - InsertTs
type TInternalKpi struct {
	// unused fields # 1 to 9
	Kpi *TKpiMessage `thrift:"kpi,10" db:"kpi" json:"kpi"`
	// unused fields # 11 to 19
	PartitionKey string `thrift:"partitionKey,20" db:"partitionKey" json:"partitionKey"`
	// unused fields # 21 to 29
	UtcTimeMin int64 `thrift:"utcTimeMin,30" db:"utcTimeMin" json:"utcTimeMin"`
	// unused fields # 31 to 39
	InsertTs int64 `thrift:"insertTs,40" db:"insertTs" json:"insertTs"`
}

func NewTInternalKpi() *TInternalKpi {
	return &TInternalKpi{}
}

var TInternalKpi_Kpi_DEFAULT *TKpiMessage

func (p *TInternalKpi) GetKpi() *TKpiMessage {
	if !p.IsSetKpi() {
		return TInternalKpi_Kpi_DEFAULT
	}
	return p.Kpi
}

func (p *TInternalKpi) GetPartitionKey() string {
	return p.PartitionKey
}

func (p *TInternalKpi) GetUtcTimeMin() int64 {
	return p.UtcTimeMin
}

func (p *TInternalKpi) GetInsertTs() int64 {
	return p.InsertTs
}
func (p *TInternalKpi) IsSetKpi() bool {
	return p.Kpi != nil
}

func (p *TInternalKpi) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 10:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField10(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 20:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField20(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 30:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField30(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 40:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField40(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TInternalKpi) ReadField10(iprot thrift.TProtocol) error {
	p.Kpi = &TKpiMessage{}
	if err := p.Kpi.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Kpi), err)
	}
	return nil
}

func (p *TInternalKpi) ReadField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 20: ", err)
	} else {
		p.PartitionKey = v
	}
	return nil
}

func (p *TInternalKpi) ReadField30(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 30: ", err)
	} else {
		p.UtcTimeMin = v
	}
	return nil
}

func (p *TInternalKpi) ReadField40(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 40: ", err)
	} else {
		p.InsertTs = v
	}
	return nil
}

func (p *TInternalKpi) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TInternalKpi"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField10(oprot); err != nil {
			return err
		}
		if err := p.writeField20(oprot); err != nil {
			return err
		}
		if err := p.writeField30(oprot); err != nil {
			return err
		}
		if err := p.writeField40(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TInternalKpi) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("kpi", thrift.STRUCT, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:kpi: ", p), err)
	}
	if err := p.Kpi.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Kpi), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:kpi: ", p), err)
	}
	return err
}

func (p *TInternalKpi) writeField20(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("partitionKey", thrift.STRING, 20); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:partitionKey: ", p), err)
	}
	if err := oprot.WriteString(string(p.PartitionKey)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.partitionKey (20) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 20:partitionKey: ", p), err)
	}
	return err
}

func (p *TInternalKpi) writeField30(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("utcTimeMin", thrift.I64, 30); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:utcTimeMin: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UtcTimeMin)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.utcTimeMin (30) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 30:utcTimeMin: ", p), err)
	}
	return err
}

func (p *TInternalKpi) writeField40(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("insertTs", thrift.I64, 40); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:insertTs: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.InsertTs)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.insertTs (40) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 40:insertTs: ", p), err)
	}
	return err
}

func (p *TInternalKpi) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TInternalKpi(%+v)", *p)
}

// Attributes:
//  - DestResouceId
//  - AppId
//  - SelfErrorLatency
//  - Throughput
//  - SelfLatency
//  - TotalLatency
//  - TotalErrorLatency
type TKpiOverall struct {
	DestResouceId     string `thrift:"destResouceId,1" db:"destResouceId" json:"destResouceId"`
	AppId             string `thrift:"appId,2" db:"appId" json:"appId"`
	SelfErrorLatency  []byte `thrift:"selfErrorLatency,3" db:"selfErrorLatency" json:"selfErrorLatency"`
	Throughput        int32  `thrift:"throughput,4" db:"throughput" json:"throughput"`
	SelfLatency       []byte `thrift:"selfLatency,5" db:"selfLatency" json:"selfLatency"`
	TotalLatency      []byte `thrift:"totalLatency,6" db:"totalLatency" json:"totalLatency"`
	TotalErrorLatency []byte `thrift:"totalErrorLatency,7" db:"totalErrorLatency" json:"totalErrorLatency"`
}

func NewTKpiOverall() *TKpiOverall {
	return &TKpiOverall{}
}

func (p *TKpiOverall) GetDestResouceId() string {
	return p.DestResouceId
}

func (p *TKpiOverall) GetAppId() string {
	return p.AppId
}

func (p *TKpiOverall) GetSelfErrorLatency() []byte {
	return p.SelfErrorLatency
}

func (p *TKpiOverall) GetThroughput() int32 {
	return p.Throughput
}

func (p *TKpiOverall) GetSelfLatency() []byte {
	return p.SelfLatency
}

func (p *TKpiOverall) GetTotalLatency() []byte {
	return p.TotalLatency
}

func (p *TKpiOverall) GetTotalErrorLatency() []byte {
	return p.TotalErrorLatency
}
func (p *TKpiOverall) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TKpiOverall) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DestResouceId = v
	}
	return nil
}

func (p *TKpiOverall) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.AppId = v
	}
	return nil
}

func (p *TKpiOverall) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.SelfErrorLatency = v
	}
	return nil
}

func (p *TKpiOverall) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Throughput = v
	}
	return nil
}

func (p *TKpiOverall) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.SelfLatency = v
	}
	return nil
}

func (p *TKpiOverall) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.TotalLatency = v
	}
	return nil
}

func (p *TKpiOverall) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.TotalErrorLatency = v
	}
	return nil
}

func (p *TKpiOverall) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TKpiOverall"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TKpiOverall) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("destResouceId", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:destResouceId: ", p), err)
	}
	if err := oprot.WriteString(string(p.DestResouceId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.destResouceId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:destResouceId: ", p), err)
	}
	return err
}

func (p *TKpiOverall) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("appId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:appId: ", p), err)
	}
	if err := oprot.WriteString(string(p.AppId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.appId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:appId: ", p), err)
	}
	return err
}

func (p *TKpiOverall) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("selfErrorLatency", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:selfErrorLatency: ", p), err)
	}
	if err := oprot.WriteBinary(p.SelfErrorLatency); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.selfErrorLatency (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:selfErrorLatency: ", p), err)
	}
	return err
}

func (p *TKpiOverall) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("throughput", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:throughput: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Throughput)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.throughput (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:throughput: ", p), err)
	}
	return err
}

func (p *TKpiOverall) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("selfLatency", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:selfLatency: ", p), err)
	}
	if err := oprot.WriteBinary(p.SelfLatency); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.selfLatency (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:selfLatency: ", p), err)
	}
	return err
}

func (p *TKpiOverall) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("totalLatency", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:totalLatency: ", p), err)
	}
	if err := oprot.WriteBinary(p.TotalLatency); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.totalLatency (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:totalLatency: ", p), err)
	}
	return err
}

func (p *TKpiOverall) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("totalErrorLatency", thrift.STRING, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:totalErrorLatency: ", p), err)
	}
	if err := oprot.WriteBinary(p.TotalErrorLatency); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.totalErrorLatency (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:totalErrorLatency: ", p), err)
	}
	return err
}

func (p *TKpiOverall) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TKpiOverall(%+v)", *p)
}

// Attributes:
//  - DestResouceId
//  - TransactionType
//  - AppId
//  - SelfErrorLatency
//  - Throughput
//  - SelfLatency
//  - TotalLatency
//  - TotalErrorLatency
type TKpiMessageByTransactionType struct {
	DestResouceId     string `thrift:"destResouceId,1" db:"destResouceId" json:"destResouceId"`
	TransactionType   string `thrift:"transactionType,2" db:"transactionType" json:"transactionType"`
	AppId             string `thrift:"appId,3" db:"appId" json:"appId"`
	SelfErrorLatency  []byte `thrift:"selfErrorLatency,4" db:"selfErrorLatency" json:"selfErrorLatency"`
	Throughput        int32  `thrift:"throughput,5" db:"throughput" json:"throughput"`
	SelfLatency       []byte `thrift:"selfLatency,6" db:"selfLatency" json:"selfLatency"`
	TotalLatency      []byte `thrift:"totalLatency,7" db:"totalLatency" json:"totalLatency"`
	TotalErrorLatency []byte `thrift:"totalErrorLatency,8" db:"totalErrorLatency" json:"totalErrorLatency"`
}

func NewTKpiMessageByTransactionType() *TKpiMessageByTransactionType {
	return &TKpiMessageByTransactionType{}
}

func (p *TKpiMessageByTransactionType) GetDestResouceId() string {
	return p.DestResouceId
}

func (p *TKpiMessageByTransactionType) GetTransactionType() string {
	return p.TransactionType
}

func (p *TKpiMessageByTransactionType) GetAppId() string {
	return p.AppId
}

func (p *TKpiMessageByTransactionType) GetSelfErrorLatency() []byte {
	return p.SelfErrorLatency
}

func (p *TKpiMessageByTransactionType) GetThroughput() int32 {
	return p.Throughput
}

func (p *TKpiMessageByTransactionType) GetSelfLatency() []byte {
	return p.SelfLatency
}

func (p *TKpiMessageByTransactionType) GetTotalLatency() []byte {
	return p.TotalLatency
}

func (p *TKpiMessageByTransactionType) GetTotalErrorLatency() []byte {
	return p.TotalErrorLatency
}
func (p *TKpiMessageByTransactionType) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField8(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TKpiMessageByTransactionType) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DestResouceId = v
	}
	return nil
}

func (p *TKpiMessageByTransactionType) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TransactionType = v
	}
	return nil
}

func (p *TKpiMessageByTransactionType) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.AppId = v
	}
	return nil
}

func (p *TKpiMessageByTransactionType) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.SelfErrorLatency = v
	}
	return nil
}

func (p *TKpiMessageByTransactionType) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Throughput = v
	}
	return nil
}

func (p *TKpiMessageByTransactionType) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.SelfLatency = v
	}
	return nil
}

func (p *TKpiMessageByTransactionType) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.TotalLatency = v
	}
	return nil
}

func (p *TKpiMessageByTransactionType) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.TotalErrorLatency = v
	}
	return nil
}

func (p *TKpiMessageByTransactionType) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TKpiMessageByTransactionType"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TKpiMessageByTransactionType) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("destResouceId", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:destResouceId: ", p), err)
	}
	if err := oprot.WriteString(string(p.DestResouceId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.destResouceId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:destResouceId: ", p), err)
	}
	return err
}

func (p *TKpiMessageByTransactionType) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("transactionType", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:transactionType: ", p), err)
	}
	if err := oprot.WriteString(string(p.TransactionType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.transactionType (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:transactionType: ", p), err)
	}
	return err
}

func (p *TKpiMessageByTransactionType) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("appId", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:appId: ", p), err)
	}
	if err := oprot.WriteString(string(p.AppId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.appId (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:appId: ", p), err)
	}
	return err
}

func (p *TKpiMessageByTransactionType) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("selfErrorLatency", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:selfErrorLatency: ", p), err)
	}
	if err := oprot.WriteBinary(p.SelfErrorLatency); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.selfErrorLatency (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:selfErrorLatency: ", p), err)
	}
	return err
}

func (p *TKpiMessageByTransactionType) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("throughput", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:throughput: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Throughput)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.throughput (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:throughput: ", p), err)
	}
	return err
}

func (p *TKpiMessageByTransactionType) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("selfLatency", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:selfLatency: ", p), err)
	}
	if err := oprot.WriteBinary(p.SelfLatency); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.selfLatency (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:selfLatency: ", p), err)
	}
	return err
}

func (p *TKpiMessageByTransactionType) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("totalLatency", thrift.STRING, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:totalLatency: ", p), err)
	}
	if err := oprot.WriteBinary(p.TotalLatency); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.totalLatency (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:totalLatency: ", p), err)
	}
	return err
}

func (p *TKpiMessageByTransactionType) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("totalErrorLatency", thrift.STRING, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:totalErrorLatency: ", p), err)
	}
	if err := oprot.WriteBinary(p.TotalErrorLatency); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.totalErrorLatency (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:totalErrorLatency: ", p), err)
	}
	return err
}

func (p *TKpiMessageByTransactionType) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TKpiMessageByTransactionType(%+v)", *p)
}

// Attributes:
//  - SqlId
//  - Txtype
//  - ResouceId
//  - DestResourceId
//  - AppId
//  - Latency
//  - ErrorLatency
//  - TraceIds4SlowSQL
//  - TraceId4SQLError
type TSQLKPIMessage struct {
	// unused fields # 1 to 9
	SqlId string `thrift:"sqlId,10" db:"sqlId" json:"sqlId"`
	// unused fields # 11 to 19
	Txtype string `thrift:"txtype,20" db:"txtype" json:"txtype"`
	// unused fields # 21 to 29
	ResouceId string `thrift:"resouceId,30" db:"resouceId" json:"resouceId"`
	// unused fields # 31 to 39
	DestResourceId string `thrift:"destResourceId,40" db:"destResourceId" json:"destResourceId"`
	// unused fields # 41 to 49
	AppId string `thrift:"appId,50" db:"appId" json:"appId"`
	// unused fields # 51 to 59
	Latency []byte `thrift:"latency,60" db:"latency" json:"latency"`
	// unused fields # 61 to 69
	ErrorLatency []byte `thrift:"errorLatency,70" db:"errorLatency" json:"errorLatency"`
	// unused fields # 71 to 79
	TraceIds4SlowSQL []string `thrift:"traceIds4SlowSQL,80" db:"traceIds4SlowSQL" json:"traceIds4SlowSQL"`
	// unused fields # 81 to 89
	TraceId4SQLError string `thrift:"traceId4SQLError,90" db:"traceId4SQLError" json:"traceId4SQLError"`
}

func NewTSQLKPIMessage() *TSQLKPIMessage {
	return &TSQLKPIMessage{}
}

func (p *TSQLKPIMessage) GetSqlId() string {
	return p.SqlId
}

func (p *TSQLKPIMessage) GetTxtype() string {
	return p.Txtype
}

func (p *TSQLKPIMessage) GetResouceId() string {
	return p.ResouceId
}

func (p *TSQLKPIMessage) GetDestResourceId() string {
	return p.DestResourceId
}

func (p *TSQLKPIMessage) GetAppId() string {
	return p.AppId
}

func (p *TSQLKPIMessage) GetLatency() []byte {
	return p.Latency
}

func (p *TSQLKPIMessage) GetErrorLatency() []byte {
	return p.ErrorLatency
}

func (p *TSQLKPIMessage) GetTraceIds4SlowSQL() []string {
	return p.TraceIds4SlowSQL
}

func (p *TSQLKPIMessage) GetTraceId4SQLError() string {
	return p.TraceId4SQLError
}
func (p *TSQLKPIMessage) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 10:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField10(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 20:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField20(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 30:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField30(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 40:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField40(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 50:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField50(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 60:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField60(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 70:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField70(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 80:
			if fieldTypeId == thrift.SET {
				if err := p.ReadField80(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 90:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField90(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TSQLKPIMessage) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.SqlId = v
	}
	return nil
}

func (p *TSQLKPIMessage) ReadField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 20: ", err)
	} else {
		p.Txtype = v
	}
	return nil
}

func (p *TSQLKPIMessage) ReadField30(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 30: ", err)
	} else {
		p.ResouceId = v
	}
	return nil
}

func (p *TSQLKPIMessage) ReadField40(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 40: ", err)
	} else {
		p.DestResourceId = v
	}
	return nil
}

func (p *TSQLKPIMessage) ReadField50(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 50: ", err)
	} else {
		p.AppId = v
	}
	return nil
}

func (p *TSQLKPIMessage) ReadField60(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 60: ", err)
	} else {
		p.Latency = v
	}
	return nil
}

func (p *TSQLKPIMessage) ReadField70(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 70: ", err)
	} else {
		p.ErrorLatency = v
	}
	return nil
}

func (p *TSQLKPIMessage) ReadField80(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make([]string, 0, size)
	p.TraceIds4SlowSQL = tSet
	for i := 0; i < size; i++ {
		var _elem2 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem2 = v
		}
		p.TraceIds4SlowSQL = append(p.TraceIds4SlowSQL, _elem2)
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *TSQLKPIMessage) ReadField90(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 90: ", err)
	} else {
		p.TraceId4SQLError = v
	}
	return nil
}

func (p *TSQLKPIMessage) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TSQLKPIMessage"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField10(oprot); err != nil {
			return err
		}
		if err := p.writeField20(oprot); err != nil {
			return err
		}
		if err := p.writeField30(oprot); err != nil {
			return err
		}
		if err := p.writeField40(oprot); err != nil {
			return err
		}
		if err := p.writeField50(oprot); err != nil {
			return err
		}
		if err := p.writeField60(oprot); err != nil {
			return err
		}
		if err := p.writeField70(oprot); err != nil {
			return err
		}
		if err := p.writeField80(oprot); err != nil {
			return err
		}
		if err := p.writeField90(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TSQLKPIMessage) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sqlId", thrift.STRING, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:sqlId: ", p), err)
	}
	if err := oprot.WriteString(string(p.SqlId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sqlId (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:sqlId: ", p), err)
	}
	return err
}

func (p *TSQLKPIMessage) writeField20(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("txtype", thrift.STRING, 20); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:txtype: ", p), err)
	}
	if err := oprot.WriteString(string(p.Txtype)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.txtype (20) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 20:txtype: ", p), err)
	}
	return err
}

func (p *TSQLKPIMessage) writeField30(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("resouceId", thrift.STRING, 30); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:resouceId: ", p), err)
	}
	if err := oprot.WriteString(string(p.ResouceId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.resouceId (30) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 30:resouceId: ", p), err)
	}
	return err
}

func (p *TSQLKPIMessage) writeField40(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("destResourceId", thrift.STRING, 40); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:destResourceId: ", p), err)
	}
	if err := oprot.WriteString(string(p.DestResourceId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.destResourceId (40) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 40:destResourceId: ", p), err)
	}
	return err
}

func (p *TSQLKPIMessage) writeField50(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("appId", thrift.STRING, 50); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 50:appId: ", p), err)
	}
	if err := oprot.WriteString(string(p.AppId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.appId (50) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 50:appId: ", p), err)
	}
	return err
}

func (p *TSQLKPIMessage) writeField60(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("latency", thrift.STRING, 60); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 60:latency: ", p), err)
	}
	if err := oprot.WriteBinary(p.Latency); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.latency (60) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 60:latency: ", p), err)
	}
	return err
}

func (p *TSQLKPIMessage) writeField70(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("errorLatency", thrift.STRING, 70); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 70:errorLatency: ", p), err)
	}
	if err := oprot.WriteBinary(p.ErrorLatency); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.errorLatency (70) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 70:errorLatency: ", p), err)
	}
	return err
}

func (p *TSQLKPIMessage) writeField80(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("traceIds4SlowSQL", thrift.SET, 80); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 80:traceIds4SlowSQL: ", p), err)
	}
	if err := oprot.WriteSetBegin(thrift.STRING, len(p.TraceIds4SlowSQL)); err != nil {
		return thrift.PrependError("error writing set begin: ", err)
	}
	for i := 0; i < len(p.TraceIds4SlowSQL); i++ {
		for j := i + 1; j < len(p.TraceIds4SlowSQL); j++ {
			if reflect.DeepEqual(p.TraceIds4SlowSQL[i], p.TraceIds4SlowSQL[j]) {
				return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.TraceIds4SlowSQL[i]))
			}
		}
	}
	for _, v := range p.TraceIds4SlowSQL {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteSetEnd(); err != nil {
		return thrift.PrependError("error writing set end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 80:traceIds4SlowSQL: ", p), err)
	}
	return err
}

func (p *TSQLKPIMessage) writeField90(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("traceId4SQLError", thrift.STRING, 90); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 90:traceId4SQLError: ", p), err)
	}
	if err := oprot.WriteString(string(p.TraceId4SQLError)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.traceId4SQLError (90) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 90:traceId4SQLError: ", p), err)
	}
	return err
}

func (p *TSQLKPIMessage) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TSQLKPIMessage(%+v)", *p)
}
