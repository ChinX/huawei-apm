// Autogenerated by Thrift Compiler (0.12.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package apm

import (
	"bytes"
	"context"
	"reflect"
	"database/sql/driver"
	"errors"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

type TMemoryEventType int64
const (
  TMemoryEventType_RESET TMemoryEventType = 0
  TMemoryEventType_WARNING TMemoryEventType = 1
  TMemoryEventType_NO_CHANGE TMemoryEventType = 2
)

func (p TMemoryEventType) String() string {
  switch p {
  case TMemoryEventType_RESET: return "RESET"
  case TMemoryEventType_WARNING: return "WARNING"
  case TMemoryEventType_NO_CHANGE: return "NO_CHANGE"
  }
  return "<UNSET>"
}

func TMemoryEventTypeFromString(s string) (TMemoryEventType, error) {
  switch s {
  case "RESET": return TMemoryEventType_RESET, nil 
  case "WARNING": return TMemoryEventType_WARNING, nil 
  case "NO_CHANGE": return TMemoryEventType_NO_CHANGE, nil 
  }
  return TMemoryEventType(0), fmt.Errorf("not a valid TMemoryEventType string")
}


func TMemoryEventTypePtr(v TMemoryEventType) *TMemoryEventType { return &v }

func (p TMemoryEventType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *TMemoryEventType) UnmarshalText(text []byte) error {
q, err := TMemoryEventTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *TMemoryEventType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = TMemoryEventType(v)
return nil
}

func (p * TMemoryEventType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - Used
//  - Max
//  - Free
//  - Percentage
type TMemoryUsage struct {
  Used int64 `thrift:"used,1" db:"used" json:"used"`
  Max int64 `thrift:"max,2" db:"max" json:"max"`
  Free int64 `thrift:"free,3" db:"free" json:"free"`
  Percentage float64 `thrift:"percentage,4" db:"percentage" json:"percentage"`
}

func NewTMemoryUsage() *TMemoryUsage {
  return &TMemoryUsage{}
}


func (p *TMemoryUsage) GetUsed() int64 {
  return p.Used
}

func (p *TMemoryUsage) GetMax() int64 {
  return p.Max
}

func (p *TMemoryUsage) GetFree() int64 {
  return p.Free
}

func (p *TMemoryUsage) GetPercentage() float64 {
  return p.Percentage
}
func (p *TMemoryUsage) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TMemoryUsage)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Used = v
}
  return nil
}

func (p *TMemoryUsage)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Max = v
}
  return nil
}

func (p *TMemoryUsage)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Free = v
}
  return nil
}

func (p *TMemoryUsage)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Percentage = v
}
  return nil
}

func (p *TMemoryUsage) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TMemoryUsage"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TMemoryUsage) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("used", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:used: ", p), err) }
  if err := oprot.WriteI64(int64(p.Used)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.used (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:used: ", p), err) }
  return err
}

func (p *TMemoryUsage) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("max", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:max: ", p), err) }
  if err := oprot.WriteI64(int64(p.Max)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.max (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:max: ", p), err) }
  return err
}

func (p *TMemoryUsage) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("free", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:free: ", p), err) }
  if err := oprot.WriteI64(int64(p.Free)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.free (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:free: ", p), err) }
  return err
}

func (p *TMemoryUsage) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("percentage", thrift.DOUBLE, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:percentage: ", p), err) }
  if err := oprot.WriteDouble(float64(p.Percentage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.percentage (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:percentage: ", p), err) }
  return err
}

func (p *TMemoryUsage) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TMemoryUsage(%+v)", *p)
}

// Attributes:
//  - MemoryUsage
//  - Created
//  - MemoryMeasurement
//  - MemoryEventType
type TMemoryWarning struct {
  MemoryUsage *TMemoryUsage `thrift:"memoryUsage,1" db:"memoryUsage" json:"memoryUsage"`
  Created int64 `thrift:"created,2" db:"created" json:"created"`
  MemoryMeasurement string `thrift:"memoryMeasurement,3" db:"memoryMeasurement" json:"memoryMeasurement"`
  MemoryEventType TMemoryEventType `thrift:"memoryEventType,4" db:"memoryEventType" json:"memoryEventType"`
}

func NewTMemoryWarning() *TMemoryWarning {
  return &TMemoryWarning{}
}

var TMemoryWarning_MemoryUsage_DEFAULT *TMemoryUsage
func (p *TMemoryWarning) GetMemoryUsage() *TMemoryUsage {
  if !p.IsSetMemoryUsage() {
    return TMemoryWarning_MemoryUsage_DEFAULT
  }
return p.MemoryUsage
}

func (p *TMemoryWarning) GetCreated() int64 {
  return p.Created
}

func (p *TMemoryWarning) GetMemoryMeasurement() string {
  return p.MemoryMeasurement
}

func (p *TMemoryWarning) GetMemoryEventType() TMemoryEventType {
  return p.MemoryEventType
}
func (p *TMemoryWarning) IsSetMemoryUsage() bool {
  return p.MemoryUsage != nil
}

func (p *TMemoryWarning) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TMemoryWarning)  ReadField1(iprot thrift.TProtocol) error {
  p.MemoryUsage = &TMemoryUsage{}
  if err := p.MemoryUsage.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.MemoryUsage), err)
  }
  return nil
}

func (p *TMemoryWarning)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Created = v
}
  return nil
}

func (p *TMemoryWarning)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.MemoryMeasurement = v
}
  return nil
}

func (p *TMemoryWarning)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := TMemoryEventType(v)
  p.MemoryEventType = temp
}
  return nil
}

func (p *TMemoryWarning) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TMemoryWarning"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TMemoryWarning) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("memoryUsage", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:memoryUsage: ", p), err) }
  if err := p.MemoryUsage.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.MemoryUsage), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:memoryUsage: ", p), err) }
  return err
}

func (p *TMemoryWarning) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("created", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:created: ", p), err) }
  if err := oprot.WriteI64(int64(p.Created)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.created (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:created: ", p), err) }
  return err
}

func (p *TMemoryWarning) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("memoryMeasurement", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:memoryMeasurement: ", p), err) }
  if err := oprot.WriteString(string(p.MemoryMeasurement)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.memoryMeasurement (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:memoryMeasurement: ", p), err) }
  return err
}

func (p *TMemoryWarning) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("memoryEventType", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:memoryEventType: ", p), err) }
  if err := oprot.WriteI32(int32(p.MemoryEventType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.memoryEventType (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:memoryEventType: ", p), err) }
  return err
}

func (p *TMemoryWarning) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TMemoryWarning(%+v)", *p)
}

